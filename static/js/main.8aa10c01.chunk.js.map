{"version":3,"sources":["assets/sayKaren_logo-white_8.1.2019.png","components/app/numberConverter.js","components/app/DataRevealed.js","components/app/Footer.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","numberConverter","value","parseFloat","toFixed","RevealData","paidInAss","interestPaidArray","mortgage","length","reduce","accu","cur","totalPaid","parseInt","className","id","style","width","backgroundColor","border","color","Footer","href","target","rel","src","sayKarenLogo","alt","todayDate","Date","App","getMonth","getFullYear","useState","setMortgage","interest","setInterest","bankPayment","setBankPayment","monthArray","principal","setPrincipal","interestRate","setInterestRate","monthlyPayment","setMonthlyPayment","extraPayment","extraPrincipalPaidArray","setExtraPrincipalPaidArray","extraInterestPaidArray","setExtraInterestPaidArray","extraNewEndingPrincipalArray","setExtraNewEndingPrincipalArray","principalPaidArray","setPrincipalPaidArray","setInterestPaidArray","newEndingPrincipalArray","setNewEndingPrincipalArray","monthDate","setMonthDate","console","table","type","name","onChange","e","handleResetMortgageAmount","currentTarget","handleResetInterestRate","handleResetMonthlyPayment","map","index","key","undefined","onClick","currentPrincipal","paymentInterestPaid","principalPaid","balance","monthDateIndex","Math","floor","processPayment","log","processLastPayment","extraCurrentPrincipal","extraMonthlyPaymentCal","extraPaymentInterestPaid","extraPrincipalPaid","extraBalance","generateCalculation","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,0D,uKCI5BC,G,MAJQ,SAACC,GACpB,OAAOC,WAAYD,EAAOE,QAAQ,MCwCvBC,EAtCI,SAAC,GAAiC,IAE7CC,EAFaC,EAA+B,EAA/BA,kBAAmBC,EAAY,EAAZA,SAMjCD,EAAkBE,OAAS,IAC1BH,EAAYL,EAAgBM,EAAkBG,QAAO,SAACC,EAAMC,GAAP,OAEjDD,EAAOC,OAIf,IAAMC,EAAYP,EAAYQ,SAASN,GAEvC,OAEI,iCACKD,EAAkBE,OAAO,GAAK,yBAAKM,UAAU,YAC1C,yBAAKA,UAAU,eAAf,sBACoBT,GAExB,yBAAKS,UAAU,eAAf,mBACqBF,EADrB,mBACgDL,GAE5C,yBAAKO,UAAU,mBACX,yBAAKC,GAAG,eAAeC,MAAO,CAACC,MAAM,IAAD,OAAMV,EAAN,YAAkBK,EAAlB,MAAiCM,gBAAiB,UAAWC,OAAQ,oBAAzG,IACMZ,EADN,aAGA,yBAAKQ,GAAG,eAAeC,MAAO,CAACC,MAAM,IAAD,OAAMZ,EAAN,YAAmBO,EAAnB,MAAkCM,gBAAiB,UAAWC,OAAQ,kBAAmBC,MAAO,YAApI,IACMf,EADN,sB,gBCJLgB,EAxBD,kBAGF,4BACIN,GAAG,SACHD,UAAU,iBAFd,sBAKI,uBACIQ,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAEJ,yBAAKC,IAAKC,IACLZ,UAAU,gBACVC,GAAG,eACHY,IAAI,oBCbzBC,EAAY,IAAIC,KA2QLC,GA1QEF,EAAUG,WACXH,EAAUI,cAUd,WAAO,IAAD,EACgBC,mBAAS,OADzB,mBACT1B,EADS,KACC2B,EADD,OAEgBD,mBAAS,MAFzB,mBAETE,EAFS,KAECC,EAFD,OAGsBH,mBAAS,MAH/B,mBAGTI,EAHS,KAGIC,EAHJ,KAKZC,EAAa,CACf,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAjBc,EAsBkBN,mBAAS1B,GAtB3B,mBAsBTiC,EAtBS,KAsBEC,EAtBF,OAuBwBR,mBAASE,GAvBjC,mBAuBTO,EAvBS,KAuBKC,EAvBL,OAwB4BV,mBAASI,GAxBrC,mBAwBTO,EAxBS,KAwBOC,EAxBP,OAyBwBZ,mBAAS,KAzBjC,mBAyBTa,EAzBS,aA4B8Cb,mBAAS,KA5BvD,mBA4BTc,EA5BS,KA4BgBC,EA5BhB,OA6B4Cf,mBAAS,IA7BrD,mBA6BTgB,EA7BS,KA6BeC,EA7Bf,OAiCZjB,mBAAS,IAjCG,mBA+BdkB,EA/Bc,KAgCdC,EAhCc,OAoCoCnB,mBAAS,IApC7C,mBAoCToB,EApCS,KAoCWC,EApCX,OAqCkCrB,mBAAS,IArC3C,mBAqCT3B,EArCS,KAqCUiD,GArCV,QAsC8CtB,mBAAS,IAtCvD,qBAsCTuB,GAtCS,MAsCgBC,GAtChB,SAuCkBxB,mBAAS,IAvC3B,qBAuCTyB,GAvCS,MAuCEC,GAvCF,MAgJhB,OAFAC,QAAQC,MAAMvD,GAGZ,6BAASQ,UAAU,OACjB,yBAAKC,GAAG,gBACN,0BAAMD,UAAU,aACd,2BAAOA,UAAU,gBAAjB,WAEI0C,GAAwBhD,QAAU,GAClC,2BACEsD,KAAK,SACLC,KAAK,WACL9D,MAAOM,EACPyD,SAAU,SAACC,GAAD,OA3BU,SAACA,GACjC/B,EAAY+B,GACZxB,EAAawB,GA0BCC,CAA0BD,EAAEE,cAAclE,WAG1C,8BAAOM,IAEf,2BAAOO,UAAU,gBAAjB,iBAEI0C,GAAwBhD,QAAU,GAClC,2BACEsD,KAAK,SACLC,KAAK,WACL9D,MAAOkC,EACP6B,SAAU,SAACC,GAAD,OAnCQ,SAACA,GAC/B7B,EAAY6B,GACZtB,EAAgBsB,GAiCaG,CAAwBH,EAAEE,cAAclE,WAEvD,8BAAOkC,IAEf,2BAAOrB,UAAU,gBAAjB,mBAEI0C,GAAwBhD,QAAU,GAClC,2BACEsD,KAAK,SACLC,KAAK,iBACL9D,MAAO2C,EACPoB,SAAU,SAACC,GAAD,OAzCU,SAACA,GACjCpB,EAAkBoB,GAClB3B,EAAe2B,GAwCDI,CAA0BJ,EAAEE,cAAclE,WAG1C,8BAAO2C,MAInB,kBAAC,EAAD,CAAYtC,kBAAmBA,EAAmBC,SAAUA,IAC5D,yBAAKQ,GAAG,aACN,yBAAKD,UAAU,aAAf,QACA,yBAAKA,UAAU,aAAf,YAEE,yBAAKA,UAAU,eAAeP,GAC7BiD,GAAwBc,KAAI,SAACrE,EAAOsE,GAAR,OAC3B,yBAAKzD,UAAU,cAAc0D,IAAKD,GAC/BtE,OAIP,yBAAKa,UAAU,aAAf,kBAEG0C,GAAwBc,KAAI,SAACrE,EAAOsE,GAAR,OAC3B,yBAAKzD,UAAU,cAAc0D,IAAKD,GAC/B3B,OAYP,yBAAK9B,UAAU,wBAAf,gBAEE,yBAAKA,UAAU,eAAf,KACCR,EAAkBgE,KAAI,SAACrE,EAAOsE,GAAR,OACrB,yBAAKzD,UAAU,cAAc0D,IAAKD,GAC/BtE,OAIP,yBAAKa,UAAU,aAAf,iBAEE,yBAAKA,UAAU,eAAf,KACCuC,EAAmBiB,KAAI,SAACrE,EAAOsE,GAAR,OACtB,yBAAKzD,UAAU,cAAc0D,IAAKD,GAC/BtE,OAKP,yBAAKa,UAAU,aAAf,mBAEG0C,GAAwBc,KAAI,SAACrE,EAAOsE,GAAR,OAC3B,yBAAKzD,UAAU,cAAc0D,IAAKD,GAC/BtE,SAKPuD,GAAwBA,GAAwBhD,OAAS,GAAK,QAE5DiE,GADFjB,GAAwBA,GAAwBhD,OAAS,KAEzD,4BAAQkE,QAAS,kBA7MK,WAC1B,IAAIC,EAAmB9D,SACrB2C,GAAwBA,GAAwBhD,OAAS,IAgC3D,QAAQ,GACN,KAAKgD,GAAwBhD,OAAS,EACpCiD,GAA2B,CAACjB,IAC5B,MACF,KAAKmC,EAAmB/B,GACtBY,GAAwBhD,QAAU,GAlCf,WACrB,IAAIoE,EAAsB5E,EACxB2E,GAAoC,IAAfjC,EAAuB,KAE1CmC,EAAgB7E,EAAgB4C,EAAiBgC,GACjDE,EAAU9E,EAAgB2E,EAAmBE,GACjDvB,EAAsB,GAAD,mBAAKD,GAAL,CAAyBwB,KAC9CtB,GAAqB,GAAD,mBAAKjD,GAAL,CAAwBsE,KAC5CnB,GAA2B,GAAD,mBAAKD,IAAL,CAA8BsB,KACxD,IAAIC,EACFrB,GAAUlD,OAA6C,GAApCwE,KAAKC,MAAMvB,GAAUlD,OAAS,IACnDmD,GAAa,GAAD,mBAAKD,IAAL,CAAgBnB,EAAWwC,MAwBrCG,GACA,MACF,KAAKP,EAAmB/B,GAvBC,WACzBgB,QAAQuB,IAAR,uBAA4BR,IAC5B,IAAIC,EAAsB5E,EACxB2E,GAAoC,IAAfjC,EAAuB,KAE1CmC,EAAgB7E,EAAgB2E,GAChCG,EAAU9E,EAAgB2E,EAAmBE,GACjDvB,EAAsB,GAAD,mBAAKD,GAAL,CAAyBwB,KAC9CtB,GAAqB,GAAD,mBAAKjD,GAAL,CAAwBsE,KAC5CnB,GAA2B,GAAD,mBAAKD,IAAL,CAA8BsB,KACxD,IAAIC,EACFrB,GAAUlD,OAA6C,GAApCwE,KAAKC,MAAMvB,GAAUlD,OAAS,IACnDmD,GAAa,GAAD,mBAAKD,IAAL,CAAgBnB,EAAWwC,MAYrCK,GACA,MACF,KAAK5B,GAAwBA,GAAwBhD,OAAS,IAAM,GAMlE2C,EAA6B3C,OAAS,GACxC4C,EAAgC,CAACZ,IAInC,IAAI6C,EACFlC,EAA6BA,EAA6B3C,OAAS,GACjE8E,EAAyB1C,EAAiBE,EAC9C,GAAIuC,EAAwBzC,EAAiBE,EAAc,CACzD,IAAIyC,EAA2BvF,EAC7BqF,GAAyC,IAAf3C,EAAuB,KAE/C8C,EAAqBxF,EACvBsF,EAAyBC,GAEvBE,EAAezF,EACjBqF,EAAwBG,GAG1BxC,EAA2B,GAAD,mBACrBD,GADqB,CAExByC,KAEFtC,EAA0B,GAAD,mBACpBD,GADoB,CAEvBsC,KAGFnC,EAAgC,GAAD,mBAC1BD,GAD0B,CAE7BsC,MA4HuBC,KAAvB,aAGF,4BAAQhB,QAAS,kBAAMiB,OAAOC,SAASC,WAAvC,iBACE,kBAAC,EAAD,SCjQYC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.8aa10c01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sayKaren_logo-white_8.1.2019.d0827d01.png\";","const numberConverter =(value) =>{\n    return parseFloat((value).toFixed(2));\n};\n\nexport default numberConverter;","import React, { useState } from 'react';\nimport numberConverter from './numberConverter';\n\nconst RevealData = ({interestPaidArray, mortgage})=>{\n\n    let paidInAss;\n\n\n    // const arrayResults = interestPaidArray;\n    if(interestPaidArray.length > 0){\n        paidInAss = numberConverter(interestPaidArray.reduce((accu, cur)=>(\n\n            accu + cur\n        )))\n\n    }\n    const totalPaid = paidInAss + parseInt(mortgage);\n\n    return(\n\n        <section >\n            {interestPaidArray.length>0 && <div className=\"dataForm\">\n                <div className=\"dataSection\">\n                You Paid the Bank ${paidInAss}\n                </div>\n            <div className=\"dataSection\">\n                Total you paid ${totalPaid} for a loan of ${mortgage}\n            </div>\n                <div className=\"bar dataSection\" >\n                    <div id=\"principalBar\" style={{width: `{${mortgage}/${totalPaid}}%`, backgroundColor: '#282c34', border: '4px solid white'}}>\n                        ${mortgage} Mortgage\n                    </div>\n                    <div id=\"interestPaid\" style={{width: `{${paidInAss}/${totalPaid}}%`, backgroundColor: '#61dafb', border: '4px solid white', color: '#282c34' }}>\n                        ${paidInAss} Interest Paid\n                    </div>\n                </div>\n            </div>}\n        </section>\n    )\n}\n\nexport default RevealData;","import React from 'react';\n// import './App.css';\nimport sayKarenLogo from '../../assets/sayKaren_logo-white_8.1.2019.png'\n\nconst Footer= ()=> (\n\n\n            <footer\n                id=\"footer\"\n                className=\"footerDetails\"\n            >\n                Website created by:\n                <a\n                    href=\"http://saykaren.com\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <img src={sayKarenLogo}\n                         className=\"footerDetails\"\n                         id=\"sayKarenLogo\"\n                         alt=\"sayKaren.com\"\n                    />\n                </a>\n            </footer>\n\n\n);\n\nexport default Footer","import React, { useState } from 'react';\nimport '../../styling/App1.scss';\nimport numberConverter from './numberConverter';\nimport RevealData from './DataRevealed';\nimport Footer from './Footer';\n\n///Dates\nlet todayDate = new Date();\nlet monthToday = todayDate.getMonth();\nlet yearToday = todayDate.getFullYear();\n\nconst titleInfo = [\n  'Date',\n  'Principal Paid',\n  'Interest Paid',\n  'Ending Principal',\n];\nconst titleExtraInfo = ['Principal Paid', 'Interest Paid', 'Ending Principal'];\n\nconst App = () => {\n  const [mortgage, setMortgage] = useState(172000);\n  const [interest, setInterest] = useState(3.75);\n  const [bankPayment, setBankPayment] = useState(1500);\n\n  let monthArray = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ];\n  let yearArray = [2020];\n\n  // // //User Input\n  const [principal, setPrincipal] = useState(mortgage);\n  const [interestRate, setInterestRate] = useState(interest);\n  const [monthlyPayment, setMonthlyPayment] = useState(bankPayment);\n  const [extraPayment, setExtraPayment] = useState(100);\n\n  //Extra payment\n  const [extraPrincipalPaidArray, setExtraPrincipalPaidArray] = useState([]);\n  const [extraInterestPaidArray, setExtraInterestPaidArray] = useState([]);\n  const [\n    extraNewEndingPrincipalArray,\n    setExtraNewEndingPrincipalArray,\n  ] = useState([]);\n\n  //Update Input\n  const [principalPaidArray, setPrincipalPaidArray] = useState([]);\n  const [interestPaidArray, setInterestPaidArray] = useState([]);\n  const [newEndingPrincipalArray, setNewEndingPrincipalArray] = useState([]);\n  const [monthDate, setMonthDate] = useState([]);\n\n  const generateCalculation = () => {\n    let currentPrincipal = parseInt(\n      newEndingPrincipalArray[newEndingPrincipalArray.length - 1],\n    );\n\n    const processPayment = () => {\n      let paymentInterestPaid = numberConverter(\n        currentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalPaid = numberConverter(monthlyPayment - paymentInterestPaid);\n      let balance = numberConverter(currentPrincipal - principalPaid);\n      setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n      setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n      setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n      let monthDateIndex =\n        monthDate.length - Math.floor(monthDate.length / 12) * 12;\n      setMonthDate([...monthDate, monthArray[monthDateIndex]]);\n    };\n\n    const processLastPayment = () => {\n      console.log(`last payment ${currentPrincipal}`);\n      let paymentInterestPaid = numberConverter(\n        currentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let principalPaid = numberConverter(currentPrincipal);\n      let balance = numberConverter(currentPrincipal - principalPaid);\n      setPrincipalPaidArray([...principalPaidArray, principalPaid]);\n      setInterestPaidArray([...interestPaidArray, paymentInterestPaid]);\n      setNewEndingPrincipalArray([...newEndingPrincipalArray, balance]);\n      let monthDateIndex =\n        monthDate.length - Math.floor(monthDate.length / 12) * 12;\n      setMonthDate([...monthDate, monthArray[monthDateIndex]]);\n    };\n\n    switch (true) {\n      case newEndingPrincipalArray.length < 1:\n        setNewEndingPrincipalArray([principal]);\n        break;\n      case currentPrincipal > monthlyPayment &&\n        newEndingPrincipalArray.length >= 1:\n        processPayment();\n        break;\n      case currentPrincipal < monthlyPayment:\n        processLastPayment();\n        break;\n      case newEndingPrincipalArray[newEndingPrincipalArray.length - 1] <= 0:\n        break;\n      default:\n        break;\n    }\n\n    if (extraNewEndingPrincipalArray.length < 1) {\n      setExtraNewEndingPrincipalArray([principal]);\n    }\n\n    //extra payment calculations\n    let extraCurrentPrincipal =\n      extraNewEndingPrincipalArray[extraNewEndingPrincipalArray.length - 1];\n    let extraMonthlyPaymentCal = monthlyPayment + extraPayment;\n    if (extraCurrentPrincipal > monthlyPayment + extraPayment) {\n      let extraPaymentInterestPaid = numberConverter(\n        extraCurrentPrincipal * ((interestRate * 0.01) / 12),\n      );\n      let extraPrincipalPaid = numberConverter(\n        extraMonthlyPaymentCal - extraPaymentInterestPaid,\n      );\n      let extraBalance = numberConverter(\n        extraCurrentPrincipal - extraPrincipalPaid,\n      );\n\n      setExtraPrincipalPaidArray([\n        ...extraPrincipalPaidArray,\n        extraPrincipalPaid,\n      ]);\n      setExtraInterestPaidArray([\n        ...extraInterestPaidArray,\n        extraPaymentInterestPaid,\n      ]);\n\n      setExtraNewEndingPrincipalArray([\n        ...extraNewEndingPrincipalArray,\n        extraBalance,\n      ]);\n    }\n    // }\n  };\n\n  const handleResetMortgageAmount = (e) => {\n    setMortgage(e);\n    setPrincipal(e);\n  };\n\n  const handleResetInterestRate = (e) => {\n    setInterest(e);\n    setInterestRate(e);\n  };\n\n  const handleResetMonthlyPayment = (e) => {\n    setMonthlyPayment(e);\n    setBankPayment(e);\n  };\n  console.table(interestPaidArray);\n\n  return (\n    <section className=\"App\">\n      <div id=\"inputSection\">\n        <form className=\"inputForm\">\n          <label className=\"inputSection\">\n            Mortage:\n            {(newEndingPrincipalArray.length <= 1 && (\n              <input\n                type=\"number\"\n                name=\"Mortgage\"\n                value={mortgage}\n                onChange={(e) =>\n                  handleResetMortgageAmount(e.currentTarget.value)\n                }\n              ></input>\n            )) || <span>{mortgage}</span>}\n          </label>\n          <label className=\"inputSection\">\n            Interest Rate:\n            {(newEndingPrincipalArray.length <= 1 && (\n              <input\n                type=\"number\"\n                name=\"Interest\"\n                value={interest}\n                onChange={(e) => handleResetInterestRate(e.currentTarget.value)}\n              ></input>\n            )) || <span>{interest}</span>}\n          </label>\n          <label className=\"inputSection\">\n            Monthly Payment:\n            {(newEndingPrincipalArray.length <= 1 && (\n              <input\n                type=\"number\"\n                name=\"MonthlyPayment\"\n                value={monthlyPayment}\n                onChange={(e) =>\n                  handleResetMonthlyPayment(e.currentTarget.value)\n                }\n              ></input>\n            )) || <span>{monthlyPayment}</span>}\n          </label>\n        </form>\n      </div>\n      <RevealData interestPaidArray={interestPaidArray} mortgage={mortgage} />\n      <div id=\"flexTable\">\n        <div className=\"tableCell\">Date</div>\n        <div className=\"tableCell\">\n          Principal\n          <div className=\"cellDetails\">{mortgage}</div>\n          {newEndingPrincipalArray.map((value, index) => (\n            <div className=\"cellDetails\" key={index}>\n              {value}\n            </div>\n          ))}\n        </div>\n        <div className=\"tableCell\">\n          Monthly Payment\n          {newEndingPrincipalArray.map((value, index) => (\n            <div className=\"cellDetails\" key={index}>\n              {monthlyPayment}\n            </div>\n          ))}\n        </div>\n        {/*<div className=\"tableCell\">*/}\n        {/*  Extra Monthly Payment*/}\n        {/*  {newEndingPrincipalArray.map((value, index)=>(*/}\n        {/*      <div className=\"cellDetails\" key={index}>*/}\n        {/*        {extraPayment}*/}\n        {/*      </div>*/}\n        {/*  ))}*/}\n        {/*</div>*/}\n        <div className=\"tableCell bottomCell\">\n          Interest Paid\n          <div className=\"cellDetails\">-</div>\n          {interestPaidArray.map((value, index) => (\n            <div className=\"cellDetails\" key={index}>\n              {value}\n            </div>\n          ))}\n        </div>\n        <div className=\"tableCell\">\n          Principal Paid\n          <div className=\"cellDetails\">-</div>\n          {principalPaidArray.map((value, index) => (\n            <div className=\"cellDetails\" key={index}>\n              {value}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"tableCell\">\n          Ending Principal\n          {newEndingPrincipalArray.map((value, index) => (\n            <div className=\"cellDetails\" key={index}>\n              {value}\n            </div>\n          ))}\n        </div>\n      </div>\n      {(newEndingPrincipalArray[newEndingPrincipalArray.length - 1] > 0 ||\n        newEndingPrincipalArray[newEndingPrincipalArray.length - 1] ==\n          undefined) && (\n        <button onClick={() => generateCalculation()}>Calculate</button>\n      )}\n\n      <button onClick={() => window.location.reload()}>Reset Numbers</button>\n        <Footer/>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}